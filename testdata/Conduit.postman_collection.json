{
	"info": {
		"_postman_id": "ac128539-514c-4690-93ea-90c75a96101f",
		"name": "Conduit",
		"description": "Collection for testing the Conduit API\n\nhttps://github.com/gothinkster/realworld",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8521556"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (!(pm.environment.isIntegrationTest)) {",
									"    var responseJSON = JSON.parse(pm.response.text());",
									"",
									"    pm.test('Response contains \"user\" property', function() {",
									"        pm.expect(responseJSON).to.have.property('user');",
									"    });",
									"",
									"    var user = responseJSON.user || {};",
									"",
									"    pm.test('\"email\" property matches EMAIL variable', function() {",
									"        const email = pm.globals.get('EMAIL') || pm.environment.get('EMAIL');",
									"        pm.expect(user.email).to.eql(email);",
									"    });",
									"    pm.test('\"usermame\" property matches USERNAME variable', function() {",
									"        const username = pm.globals.get('USERNAME') || pm.environment.get('USERNAME');",
									"        pm.expect(user.username).to.eql(username);",
									"    });",
									"    pm.test('User has default \"bio\" property', function() {",
									"        pm.expect(user.bio).to.eql('I work at statefarm');",
									"    });",
									"    pm.test('User has \"image\" property', function() {",
									"        pm.expect(user).to.have.property('image');",
									"        pm.expect(user.image).to.be.null;",
									"    });",
									"    pm.test('User has \"token\" property', function() {",
									"        pm.expect(user).to.have.property('token');",
									"    });",
									"    pm.test('\"token\" property is not empty', function() {",
									"        pm.expect(user.token).to.not.be.empty",
									"    });",
									"    pm.test('\"token\" property is not same as password', function() {",
									"    const password = pm.globals.get('PASSWORD') || pm.environment.get('PASSWORD');",
									"    pm.expect(user.token).to.not.eql(password, 'The password must be hashed, and not stored in plain text');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\", \"username\":\"{{USERNAME}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/users",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register (second user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (!(pm.environment.isIntegrationTest)) {",
									"    var responseJSON = JSON.parse(pm.response.text());",
									"",
									"    pm.test('Response contains \"user\" property', function() {",
									"        pm.expect(responseJSON).to.have.property('user');",
									"    });",
									"",
									"    var user = responseJSON.user || {};",
									"",
									"    pm.test('\"email\" property matches SECOND_EMAIL variable', function() {",
									"        const email = pm.globals.get('SECOND_EMAIL');",
									"        pm.expect(user.email).to.eql(email);",
									"    });",
									"    pm.test('\"usermame\" property matches SECOND_USERNAME variable', function() {",
									"        const username = pm.globals.get('SECOND_USERNAME');",
									"        pm.expect(user.username).to.eql(username);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"SECOND_EMAIL\", (Math.random() * 1000) + \"@example.com\")",
									"pm.globals.set(\"SECOND_USERNAME\", (Math.random() * 1000) + \"\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"{{SECOND_EMAIL}}\", \"password\":\"{{PASSWORD}}\", \"username\":\"{{SECOND_USERNAME}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/users",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register - validation - duplicate username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (!(pm.environment.isIntegrationTest)) {",
									"    pm.test('Response is HTTP 422', function() {",
									"        pm.expect(pm.response.status).to.eql('Unprocessable Entity')",
									"    })",
									"",
									"    var responseJSON = JSON.parse(pm.response.text());",
									"",
									"    pm.test('Response contains \"errors\" property', function() {",
									"        pm.expect(responseJSON).to.have.property('errors');",
									"    });",
									"",
									"    var errors = responseJSON.errors || {};",
									"",
									"    pm.test('\"username\" property is duplicate', function() {",
									"       pm.expect(errors.username).to.eql('duplicate username')",
									"   　});",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"RANDOM_EMAIL\", (Math.random() * 1000) + \"@example.com\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"{{RANDOM_EMAIL}}\", \"password\":\"{{PASSWORD}}\", \"username\":\"{{USERNAME}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/users",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register - validation - duplicate email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (!(pm.environment.isIntegrationTest)) {",
									"    pm.test('Response is HTTP 422', function() {",
									"        pm.expect(pm.response.status).to.eql('Unprocessable Entity')",
									"    })",
									"",
									"    var responseJSON = JSON.parse(pm.response.text());",
									"",
									"    pm.test('Response contains \"errors\" property', function() {",
									"        pm.expect(responseJSON).to.have.property('errors');",
									"    });",
									"",
									"    var errors = responseJSON.errors || {};",
									"",
									"    pm.test('\"email\" property is duplicate', function() {",
									"       pm.expect(errors.email).to.eql('duplicate email')",
									"   　});",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"RANDOM_USERNAME\", \"yolo\" + (Math.random() * 1000))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\", \"username\":\"{{RANDOM_USERNAME}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/users",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register - validation - not a valid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (!(pm.environment.isIntegrationTest)) {",
									"    pm.test('Response is HTTP 422', function() {",
									"        pm.expect(pm.response.status).to.eql('Unprocessable Entity')",
									"    })",
									"",
									"    var responseJSON = JSON.parse(pm.response.text());",
									"",
									"    pm.test('Response contains \"errors\" property', function() {",
									"        pm.expect(responseJSON).to.have.property('errors');",
									"    });",
									"",
									"    var errors = responseJSON.errors || {};",
									"",
									"    pm.test('\"email\" property must be valid email address', function() {",
									"       pm.expect(errors).to.have.property('email')",
									"   　});",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('RANDOM_USERNAME', \"username\" + (Math.random() * 100))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"soloyolo\", \"password\":\"{{PASSWORD}}\", \"username\":\"{{RANDOM_USERNAME}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/users",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register - validation - missing required fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (!(pm.environment.isIntegrationTest)) {",
									"    pm.test('Response is HTTP 422', function() {",
									"        pm.expect(pm.response.status).to.eql('Unprocessable Entity')",
									"    })",
									"",
									"    var responseJSON = JSON.parse(pm.response.text());",
									"",
									"    pm.test('Response contains \"errors\" property', function() {",
									"        pm.expect(responseJSON).to.have.property('errors');",
									"    });",
									"",
									"    var errors = responseJSON.errors || {};",
									"",
									"    pm.test('\"email\" property must be valid email address', function() {",
									"       pm.expect(errors).to.have.property('email')",
									"   　});",
									"    pm.test('\"username\" property must be present', function() {",
									"       pm.expect(errors).to.have.property('username')",
									"    });",
									"    pm.test('\"password\" property must be at least 8 characters', function() {",
									"       pm.expect(errors).to.have.property('password')",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('RANDOM_USERNAME', \"username\" + (Math.random() * 100))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{}}"
						},
						"url": {
							"raw": "{{APIURL}}/users",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register - validation - required fields blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (!(pm.environment.isIntegrationTest)) {",
									"    pm.test('Response is HTTP 422', function() {",
									"        pm.expect(pm.response.status).to.eql('Unprocessable Entity')",
									"    })",
									"",
									"    var responseJSON = JSON.parse(pm.response.text());",
									"",
									"    pm.test('Response contains \"errors\" property', function() {",
									"        pm.expect(responseJSON).to.have.property('errors');",
									"    });",
									"",
									"    var errors = responseJSON.errors || {};",
									"",
									"    pm.test('\"email\" property must be valid email address', function() {",
									"       pm.expect(errors).to.have.property('email')",
									"   　});",
									"    pm.test('\"username\" property must be present', function() {",
									"       pm.expect(errors).to.have.property('username')",
									"    });",
									"    pm.test('\"password\" property must be at least 8 characters', function() {",
									"       pm.expect(errors).to.have.property('password')",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('RANDOM_USERNAME', \"username\" + (Math.random() * 100))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\": \"\", \"password\":\"\", \"username\":\"\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/users",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response contains \"user\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('user')",
									"});",
									"",
									"var user = responseJSON.user || {};",
									"",
									"pm.test('user.email matches the EMAIL variable', function() {",
									"    const email = pm.globals.get('EMAIL') || pm.environment.get('EMAIL')",
									"    pm.expect(user.email).to.eql(email)",
									"});",
									"pm.test('user.usermame matches USERNAME variable', function() {",
									"    const username = pm.globals.get('USERNAME') || pm.environment.get('USERNAME')",
									"    pm.expect(user.username).to.eql(username)",
									"});",
									"pm.test('User has \"bio\" property', function() {",
									"    pm.expect(user).to.have.property('bio')",
									"});",
									"pm.test('User has \"image\" property', function() {",
									"    pm.expect(user).to.have.property('image')",
									"});",
									"pm.test('User has \"token\" property', function() {",
									"    pm.expect(user).to.have.property('token')",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/users/login",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Failed - error - user not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is HTTP 401', function() {",
									"    pm.expect(pm.response.status).to.eql('Unauthorized')",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"someone@example.com\", \"password\":\"{{PASSWORD}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/users/login",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Failed - error - incorrect password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is HTTP 401', function() {",
									"    pm.expect(pm.response.status).to.eql('Unauthorized')",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"oops\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/users/login",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login and Remember Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response contains \"user\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('user')",
									"});",
									"",
									"var user = responseJSON.user || {};",
									"",
									"pm.test('user.email matches the EMAIL variable', function() {",
									"    const email = pm.globals.get('EMAIL') || pm.environment.get('EMAIL')",
									"    pm.expect(user.email).to.eql(email)",
									"});",
									"pm.test('user.usermame matches USERNAME variable', function() {",
									"    const username = pm.globals.get('USERNAME') || pm.environment.get('USERNAME')",
									"    pm.expect(user.username).to.eql(username)",
									"});",
									"pm.test('User has \"bio\" property', function() {",
									"    pm.expect(user).to.have.property('bio')",
									"});",
									"pm.test('User has \"image\" property', function() {",
									"    pm.expect(user).to.have.property('image')",
									"});",
									"pm.test('User has \"token\" property', function() {",
									"    pm.expect(user).to.have.property('token')",
									"});",
									"",
									"if(pm.test('User has \"token\" property')){",
									"    pm.globals.set('token', user.token);",
									"}",
									"",
									"pm.test('Global variable \"token\" has been set', function() {",
									"    pm.globals.get('token') === user.token",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/users/login",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response contains \"user\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('user')",
									"});",
									"",
									"var user = responseJSON.user || {};",
									"",
									"pm.test('user.email matches the EMAIL variable', function() {",
									"    const email = pm.globals.get('EMAIL') || pm.environment.get('EMAIL')",
									"    pm.expect(user.email).to.eql(email)",
									"});",
									"pm.test('user.usermame matches USERNAME variable', function() {",
									"    const username = pm.globals.get('USERNAME') || pm.environment.get('USERNAME')",
									"    pm.expect(user.username).to.eql(username)",
									"});",
									"pm.test('User has \"bio\" property', function() {",
									"    pm.expect(user).to.have.property('bio')",
									"});",
									"pm.test('User has \"image\" property', function() {",
									"    pm.expect(user).to.have.property('image')",
									"});",
									"pm.test('User has \"token\" property that matches the token in the Authorization header', function() {",
									"    pm.expect(user.token).to.eql(pm.globals.get('token'))",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"url": {
							"raw": "{{APIURL}}/user",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current User - error - unauthenticated, missing authorization header",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is HTTP 401', function() {",
									"    pm.expect(pm.response.status).to.eql('Unauthorized')",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{APIURL}}/user",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current User - error - unauthenticated, invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is HTTP 401', function() {",
									"    pm.expect(pm.response.status).to.eql('Unauthorized')",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token 123"
							}
						],
						"url": {
							"raw": "{{APIURL}}/user",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response contains \"user\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('user')",
									"});",
									"",
									"var user = responseJSON.user || {};",
									"",
									"pm.test('\"email\" matches the UPDATED_EMAIL variable', function() {",
									"    const email = pm.globals.get('UPDATED_EMAIL')",
									"    pm.expect(user.email).to.eql(email)",
									"});",
									"pm.test('\"username\" matches UPDATED_USERNAME variable', function() {",
									"    const username = pm.globals.get('UPDATED_USERNAME')",
									"    pm.expect(user.username).to.eql(username)",
									"});",
									"pm.test('\"bio\" matches the UPDATED_BIO variable', function() {",
									"    pm.expect(user.bio).to.eql(pm.globals.get('UPDATED_BIO'))",
									"});",
									"pm.test('\"image\" matches the UPDATED_IMAGE variable', function() {",
									"    pm.expect(user.image).to.eql(pm.globals.get('UPDATED_IMAGE'))",
									"});",
									"pm.test('User has \"token\" property', function() {",
									"    pm.expect(user).to.have.property('token')",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('UPDATED_USERNAME', (Math.random() * 1000) + 'user')",
									"pm.globals.set('UPDATED_EMAIL', (Math.random() * 1000) + '@example.com')",
									"pm.globals.set('UPDATED_PASSWORD', 'password' + (Math.random() * 1000))",
									"pm.globals.set('UPDATED_BIO', 'I no longer work at statefarm')",
									"pm.globals.set('UPDATED_IMAGE', 'https://i.stack.imgur.com/xHWG8.jpg')",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\":{\n        \"username\":\"{{UPDATED_USERNAME}}\",\n        \"email\":\"{{UPDATED_EMAIL}}\",\n        \"password\":\"{{UPDATED_PASSWORD}}\",\n        \"bio\":\"{{UPDATED_BIO}}\",\n        \"image\":\"{{UPDATED_IMAGE}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{APIURL}}/user",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User - validation - provided fields blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response is HTTP 422', function() {",
									"        pm.expect(pm.response.status).to.eql('Unprocessable Entity')",
									"})",
									"",
									"pm.test('Response contains \"errors\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('errors');",
									"});",
									"",
									"var errors = responseJSON.errors || {};",
									"",
									"pm.test('\"email\" property must be valid email address', function() {",
									"    pm.expect(errors).to.have.property('email')",
									"});",
									"pm.test('\"username\" property must be present', function() {",
									"    pm.expect(errors).to.have.property('username')",
									"});",
									"pm.test('\"bio\" property must be present', function() {",
									"    pm.expect(errors).to.have.property('bio')",
									"});",
									"pm.test('\"password\" property must be at least 8 characters', function() {",
									"    pm.expect(errors).to.have.property('password')",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('UPDATED_USERNAME', (Math.random() * 1000) + 'user')",
									"pm.globals.set('UPDATED_EMAIL', (Math.random() * 1000) + '@example.com')",
									"pm.globals.set('UPDATED_PASSWORD', 'password' + (Math.random() * 1000))",
									"pm.globals.set('UPDATED_BIO', 'I no longer work at statefarm')",
									"pm.globals.set('UPDATED_IMAGE', 'https://i.stack.imgur.com/xHWG8.jpg')",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\":{\n        \"username\":\"\",\n        \"email\":\"\",\n        \"password\":\"\",\n        \"bio\":\"\"\n    }\n}"
						},
						"url": {
							"raw": "{{APIURL}}/user",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User - validation - duplicate email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response is HTTP 422', function() {",
									"        pm.expect(pm.response.status).to.eql('Unprocessable Entity')",
									"})",
									"",
									"pm.test('Response contains \"errors\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('errors');",
									"});",
									"",
									"var errors = responseJSON.errors || {};",
									"",
									"pm.test('\"email\" property is duplicate', function() {",
									"    pm.expect(errors.email).to.equal('duplicate email')",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('UPDATED_USERNAME', (Math.random() * 1000) + 'user')",
									"pm.globals.set('UPDATED_EMAIL', (Math.random() * 1000) + '@example.com')",
									"pm.globals.set('UPDATED_PASSWORD', 'password' + (Math.random() * 1000))",
									"pm.globals.set('UPDATED_BIO', 'I no longer work at statefarm')",
									"pm.globals.set('UPDATED_IMAGE', 'https://i.stack.imgur.com/xHWG8.jpg')",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\":{\n        \"email\":\"{{SECOND_EMAIL}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{APIURL}}/user",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User - validation - duplicate username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response is HTTP 422', function() {",
									"        pm.expect(pm.response.status).to.eql('Unprocessable Entity')",
									"})",
									"",
									"pm.test('Response contains \"errors\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('errors');",
									"});",
									"",
									"var errors = responseJSON.errors || {};",
									"",
									"pm.test('\"username\" property is duplicate', function() {",
									"    pm.expect(errors.username).to.eql('duplicate username')",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('UPDATED_USERNAME', (Math.random() * 1000) + 'user')",
									"pm.globals.set('UPDATED_EMAIL', (Math.random() * 1000) + '@example.com')",
									"pm.globals.set('UPDATED_PASSWORD', 'password' + (Math.random() * 1000))",
									"pm.globals.set('UPDATED_BIO', 'I no longer work at statefarm')",
									"pm.globals.set('UPDATED_IMAGE', 'https://i.stack.imgur.com/xHWG8.jpg')",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\":{\n        \"username\":\"{{SECOND_USERNAME}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{APIURL}}/user",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User - error - unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is HTTP 401', function() {",
									"    pm.expect(pm.response.status).to.eql('Unauthorized')",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"bio\":\"I no longer work at statefarm\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/user",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ArticlesEmpty",
			"item": [
				{
					"name": "All Articles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('response has property \"articles\"', function() {",
									"    pm.expect(responseJSON).to.have.property('articles')",
									"})",
									"",
									"pm.test('articlesCount is 0 when feed is empty', function() {",
									"    responseJSON.articlesCount === 0",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"url": {
							"raw": "{{APIURL}}/articles",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Articles by Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('response has property \"articles\"', function() {",
									"    pm.expect(responseJSON).to.have.property('articles')",
									"})",
									"",
									"pm.test('articlesCount is 0 when feed is empty', function() {",
									"    responseJSON.articlesCount === 0",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"url": {
							"raw": "{{APIURL}}/articles?author=johnjacob",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles"
							],
							"query": [
								{
									"key": "author",
									"value": "johnjacob"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Articles Favorited by Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('response has property \"articles\"', function() {",
									"    pm.expect(responseJSON).to.have.property('articles')",
									"})",
									"",
									"pm.test('articlesCount is 0 when feed is empty', function() {",
									"    responseJSON.articlesCount === 0",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"url": {
							"raw": "{{APIURL}}/articles?favorited={{USERNAME}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles"
							],
							"query": [
								{
									"key": "favorited",
									"value": "{{USERNAME}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Articles by Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('response has property \"articles\"', function() {",
									"    pm.expect(responseJSON).to.have.property('articles')",
									"})",
									"",
									"pm.test('articlesCount is 0 when feed is empty', function() {",
									"    responseJSON.articlesCount === 0",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"url": {
							"raw": "{{APIURL}}/articles?tag=dragons",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles"
							],
							"query": [
								{
									"key": "tag",
									"value": "dragons"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Articles",
			"item": [
				{
					"name": "Register Articles User - setup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (!(pm.environment.isIntegrationTest)) {",
									"    var responseJSON = JSON.parse(pm.response.text());",
									"",
									"    pm.test('Response contains \"user\" property', function() {",
									"        pm.expect(responseJSON).to.have.property('user');",
									"    });",
									"",
									"    var user = responseJSON.user || {};",
									"",
									"    pm.test('\"email\" property matches ARTICLES_USER_EMAIL variable', function() {",
									"        const email = pm.globals.get('ARTICLES_USER_EMAIL');",
									"        pm.expect(user.email).to.eql(email);",
									"    });",
									"    pm.test('\"usermame\" property matches ARTICLES_USER_USERNAME variable', function() {",
									"        const username = pm.globals.get('ARTICLES_USER_USERNAME');",
									"        pm.expect(user.username).to.eql(username);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"ARTICLES_USER_EMAIL\", (Math.random() * 1000) + \"@example.com\")",
									"pm.globals.set(\"ARTICLES_USER_USERNAME\", (Math.random() * 1000) + \"\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"{{ARTICLES_USER_EMAIL}}\", \"password\":\"{{PASSWORD}}\", \"username\":\"{{ARTICLES_USER_USERNAME}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/users",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Articles User 2 - setup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (!(pm.environment.isIntegrationTest)) {",
									"    var responseJSON = JSON.parse(pm.response.text());",
									"",
									"    pm.test('Response contains \"user\" property', function() {",
									"        pm.expect(responseJSON).to.have.property('user');",
									"    });",
									"",
									"    var user = responseJSON.user || {};",
									"",
									"    pm.test('\"email\" property matches ARTICLES_USER_EMAIL_2 variable', function() {",
									"        const email = pm.globals.get('ARTICLES_USER_EMAIL_2');",
									"        pm.expect(user.email).to.eql(email);",
									"    });",
									"    pm.test('\"usermame\" property matches ARTICLES_USER_USERNAME_2 variable', function() {",
									"        const username = pm.globals.get('ARTICLES_USER_USERNAME_2');",
									"        pm.expect(user.username).to.eql(username);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"ARTICLES_USER_EMAIL_2\", (Math.random() * 1000) + \"@example.com\")",
									"pm.globals.set(\"ARTICLES_USER_USERNAME_2\", (Math.random() * 1000) + \"\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"{{ARTICLES_USER_EMAIL_2}}\", \"password\":\"{{PASSWORD}}\", \"username\":\"{{ARTICLES_USER_USERNAME_2}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/users",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login and Remember Token - setup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response contains \"user\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('user')",
									"});",
									"",
									"var user = responseJSON.user || {};",
									"",
									"pm.test('User has \"token\" property', function() {",
									"    pm.expect(user).to.have.property('token')",
									"});",
									"",
									"if(pm.test('User has \"token\" property')){",
									"    pm.globals.set('articles_user_token', user.token);",
									"}",
									"",
									"pm.test('Global variable \"articles_user_token\" has been set', function() {",
									"    pm.globals.get('articles_user_token') === user.token",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"{{ARTICLES_USER_EMAIL}}\", \"password\":\"{{PASSWORD}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/users/login",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login and Remember Token 2 - setup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response contains \"user\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('user')",
									"});",
									"",
									"var user = responseJSON.user || {};",
									"",
									"pm.test('User has \"token\" property', function() {",
									"    pm.expect(user).to.have.property('token')",
									"});",
									"",
									"if(pm.test('User has \"token\" property')){",
									"    pm.globals.set('articles_user_token_2', user.token);",
									"}",
									"",
									"pm.test('Global variable \"articles_user_token_2\" has been set', function() {",
									"    pm.globals.get('articles_user_token_2') === user.token",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"{{ARTICLES_USER_EMAIL_2}}\", \"password\":\"{{PASSWORD}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/users/login",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Article",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response contains \"article\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('article');",
									"});",
									"",
									"var article = responseJSON.article || {};",
									"",
									"pm.test('Article contains \"title\" property', function() {",
									"    pm.expect(article).to.have.property('title');",
									"    pm.expect(article.title).to.eql(pm.globals.get('ARTICLE_TITLE'))",
									"});",
									"",
									"pm.test('Article contains \"slug\" property', function() {",
									"    pm.expect(article).to.have.property('slug');",
									"    pm.expect(article.slug).to.eql(pm.globals.get('ARTICLE_SLUG'))",
									"});",
									"",
									"pm.test('Article contains \"body\" property', function() {",
									"    pm.expect(article).to.have.property('body');",
									"    pm.expect(article.body).to.eql(pm.globals.get('ARTICLE_BODY'))",
									"});",
									"",
									"pm.test('Article contains \"createdAt\" property', function() {",
									"    pm.expect(article).to.have.property('createdAt');",
									"});",
									"pm.test('Article\\'s \"createdAt\" property is an ISO 8601 timestamp', function() {",
									"    /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
									"});",
									"pm.test('Article \"createdAt\" is after REQUEST_DATE_TIME', function() {",
									"    const requestDateTime = new Date(pm.globals.get('REQUEST_DATE_TIME'))",
									"    const createdAt = new Date(article.createdAt)",
									"    pm.expect(createdAt).to.be.above(requestDateTime)",
									"})",
									"",
									"pm.test('Article contains \"updatedAt\" property', function() {",
									"    pm.expect(article).to.have.property('updatedAt');",
									"});",
									"pm.test('Article\\'s \"updatedAt\" property is an ISO 8601 timestamp', function() {",
									"    /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
									"});",
									"pm.test('Article \"updatedAt\" is after REQUEST_DATE_TIME', function() {",
									"    const requestDateTime = new Date(pm.globals.get('REQUEST_DATE_TIME'))",
									"    const updatedAt = new Date(article.updatedAt)",
									"    pm.expect(updatedAt).to.be.above(requestDateTime)",
									"})",
									"",
									"pm.test('Article contains \"description\" property', function() {",
									"    pm.expect(article).to.have.property('description');",
									"    pm.expect(article.description).to.eql(pm.globals.get('ARTICLE_DESCRIPTION'))",
									"});",
									"",
									"pm.test('Article contains \"tagList\" property', function() {",
									"    pm.expect(article).to.have.property('tagList');",
									"});",
									"pm.test('Article\\'s \"tagList\" property is an Array', function() {",
									"    Array.isArray(article.tagList);",
									"    pm.expect(article.tagList).to.have.members([",
									"        pm.globals.get('TAG_1'),",
									"        pm.globals.get('TAG_2')",
									"    ]);",
									"});",
									"",
									"pm.test('Article contains \"author\" property', function() {",
									"    pm.expect(article).to.have.property('author');",
									"});",
									"pm.test('Author \"username\" equals ARTICLES_USER_USERNAME', function() {",
									"    pm.expect(article.author).to.have.property('username');",
									"    pm.expect(article.author.username).to.eql(pm.globals.get('ARTICLES_USER_USERNAME'))",
									"})",
									"pm.test('Author \"bio\" equals default', function() {",
									"    pm.expect(article.author).to.have.property('bio');",
									"    pm.expect(article.author.bio).to.eql('I work at statefarm')",
									"})",
									"pm.test('Author \"image\" equals null', function() {",
									"    pm.expect(article.author).to.have.property('image');",
									"    pm.expect(article.author.image).to.be.null;",
									"})",
									"pm.test('Author \"following\" equals false', function() {",
									"    pm.expect(article.author).to.have.property('following');",
									"    pm.expect(article.author.following).to.be.false;",
									"})",
									"",
									"pm.test('Article contains \"favorited\" property', function() {",
									"    pm.expect(article).to.have.property('favorited');",
									"    pm.expect(article.favorited).to.eql(false)",
									"});",
									"",
									"pm.test('Article contains \"favoritesCount\" property', function() {",
									"    pm.expect(article).to.have.property('favoritesCount');",
									"    pm.expect(article.favoritesCount).to.eql(0)",
									"});",
									"",
									"pm.test('favoritesCount is an integer', function() {",
									"    Number.isInteger(article.favoritesCount);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('ARTICLE_TITLE', 'How to train your dragon')",
									"pm.globals.set('ARTICLE_SLUG', 'how-to-train-your-dragon')",
									"pm.globals.set('ARTICLE_DESCRIPTION', 'Ever wonder how?')",
									"pm.globals.set('ARTICLE_BODY', 'Very carefully.')",
									"pm.globals.set('REQUEST_DATE_TIME', new Date().toISOString())",
									"pm.globals.set('TAG_1', 'training')",
									"pm.globals.set('TAG_2', 'dragons')"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{articles_user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"article\": {\n        \"title\":\"{{ARTICLE_TITLE}}\", \n        \"description\":\"{{ARTICLE_DESCRIPTION}}\", \n        \"body\":\"{{ARTICLE_BODY}}\",\n        \"tagList\":[\"{{TAG_1}}\", \"{{TAG_2}}\"]\n    }\n}"
						},
						"url": {
							"raw": "{{APIURL}}/articles",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Article without tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response contains \"article\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('article');",
									"});",
									"",
									"var article = responseJSON.article || {};",
									"",
									"pm.test('Article contains \"tagList\" property', function() {",
									"    pm.expect(article).to.have.property('tagList');",
									"});",
									"pm.test('Article\\'s \"tagList\" property is an empty Array', function() {",
									"    Array.isArray(article.tagList);",
									"    pm.expect(article.tagList).to.have.members([]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('ARTICLE_TITLE', 'How to train your dragon')",
									"pm.globals.set('ARTICLE_SLUG', 'how-to-train-your-dragon')",
									"pm.globals.set('ARTICLE_DESCRIPTION', 'Ever wonder how?')",
									"pm.globals.set('ARTICLE_BODY', 'Very carefully.')",
									"pm.globals.set('REQUEST_DATE_TIME', new Date().toISOString())",
									"pm.globals.set('TAG_1', 'training')",
									"pm.globals.set('TAG_2', 'dragons')"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{articles_user_token_2}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"article\": {\n        \"title\":\"{{ARTICLE_TITLE}}2\", \n        \"description\":\"{{ARTICLE_DESCRIPTION}}\", \n        \"body\":\"{{ARTICLE_BODY}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{APIURL}}/articles",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Article - validation - missing required fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is HTTP 422', function() {",
									"    pm.expect(pm.response.status).to.eql('Unprocessable Entity')",
									"})",
									"",
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response contains \"errors\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('errors');",
									"});",
									"",
									"var errors = responseJSON.errors || {};",
									"",
									"pm.test('\"title\" must not be empty', function() {",
									"    pm.expect(errors).to.have.property('title')",
									"});",
									"pm.test('\"description\" must not be empty', function() {",
									"    pm.expect(errors).to.have.property('description')",
									"});",
									"pm.test('\"body\" must not be empty', function() {",
									"    pm.expect(errors).to.have.property('body')",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{articles_user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"article\":{}}"
						},
						"url": {
							"raw": "{{APIURL}}/articles",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Article - validation - required fields empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is HTTP 422', function() {",
									"    pm.expect(pm.response.status).to.eql('Unprocessable Entity')",
									"})",
									"",
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response contains \"errors\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('errors');",
									"});",
									"",
									"var errors = responseJSON.errors || {};",
									"",
									"pm.test('\"title\" must not be empty', function() {",
									"    pm.expect(errors).to.have.property('title')",
									"});",
									"pm.test('\"description\" must not be empty', function() {",
									"    pm.expect(errors).to.have.property('description')",
									"});",
									"pm.test('\"body\" must not be empty', function() {",
									"    pm.expect(errors).to.have.property('body')",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{articles_user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"article\":{\"title\":\"\", \"description\":\"\", \"body\":\"\", \"tagList\":[]}}"
						},
						"url": {
							"raw": "{{APIURL}}/articles",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Article - validation - invalid tag (comma)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is HTTP 422', function() {",
									"    pm.expect(pm.response.status).to.eql('Unprocessable Entity')",
									"})",
									"",
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response contains \"errors\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('errors');",
									"});",
									"",
									"var errors = responseJSON.errors || {};",
									"",
									"pm.test('\"tagList\" contains invalid tag', function() {",
									"    pm.expect(errors).to.have.property('tagList')",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('ARTICLE_TITLE', 'How to train your dragon')",
									"pm.globals.set('ARTICLE_SLUG', 'how-to-train-your-dragon')",
									"pm.globals.set('ARTICLE_DESCRIPTION', 'Ever wonder how?')",
									"pm.globals.set('ARTICLE_BODY', 'Very carefully.')",
									"pm.globals.set('REQUEST_DATE_TIME', new Date().toISOString())",
									"pm.globals.set('TAG_1', 'training')",
									"pm.globals.set('TAG_2', 'dragons')"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{articles_user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"article\": {\n        \"title\":\"{{ARTICLE_TITLE}}3\", \n        \"description\":\"{{ARTICLE_DESCRIPTION}}\", \n        \"body\":\"{{ARTICLE_BODY}}\",\n        \"tagList\":[\"ta,g\"]\n    }\n}"
						},
						"url": {
							"raw": "{{APIURL}}/articles",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Article - validation - invalid tag (empty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is HTTP 422', function() {",
									"    pm.expect(pm.response.status).to.eql('Unprocessable Entity')",
									"})",
									"",
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response contains \"errors\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('errors');",
									"});",
									"",
									"var errors = responseJSON.errors || {};",
									"",
									"pm.test('\"tagList\" contains invalid tag', function() {",
									"    pm.expect(errors).to.have.property('tagList')",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('ARTICLE_TITLE', 'How to train your dragon')",
									"pm.globals.set('ARTICLE_SLUG', 'how-to-train-your-dragon')",
									"pm.globals.set('ARTICLE_DESCRIPTION', 'Ever wonder how?')",
									"pm.globals.set('ARTICLE_BODY', 'Very carefully.')",
									"pm.globals.set('REQUEST_DATE_TIME', new Date().toISOString())",
									"pm.globals.set('TAG_1', 'training')",
									"pm.globals.set('TAG_2', 'dragons')"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{articles_user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"article\": {\n        \"title\":\"{{ARTICLE_TITLE}}4\", \n        \"description\":\"{{ARTICLE_DESCRIPTION}}\", \n        \"body\":\"{{ARTICLE_BODY}}\",\n        \"tagList\":[\"\"]\n    }\n}"
						},
						"url": {
							"raw": "{{APIURL}}/articles",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Article - validation - duplicate slug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is HTTP 422', function() {",
									"    pm.expect(pm.response.status).to.eql('Unprocessable Entity')",
									"})",
									"",
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response contains \"errors\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('errors');",
									"});",
									"",
									"var errors = responseJSON.errors || {};",
									"",
									"pm.test('\"slug\" is duplicate', function() {",
									"    pm.expect(errors).to.have.property('slug')",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('ARTICLE_TITLE', 'How to train your dragon')",
									"pm.globals.set('ARTICLE_SLUG', 'how-to-train-your-dragon')",
									"pm.globals.set('ARTICLE_DESCRIPTION', 'Ever wonder how?')",
									"pm.globals.set('ARTICLE_BODY', 'Very carefully.')",
									"pm.globals.set('REQUEST_DATE_TIME', new Date().toISOString())",
									"pm.globals.set('TAG_1', 'training')",
									"pm.globals.set('TAG_2', 'dragons')"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{articles_user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"article\": {\n        \"title\":\"{{ARTICLE_TITLE}}\", \n        \"description\":\"{{ARTICLE_DESCRIPTION}}\", \n        \"body\":\"{{ARTICLE_BODY}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{APIURL}}/articles",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Article - error - unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is HTTP 401', function() {",
									"    pm.expect(pm.response.status).to.eql('Unauthorized')",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{articles_user_token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"article\":{\"title\":\"How to train your dragon\", \"description\":\"Ever wonder how?\", \"body\":\"Very carefully.\", \"tagList\":[\"training\", \"dragons\"]}}"
						},
						"url": {
							"raw": "{{APIURL}}/articles",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Article - error - not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is HTTP 404', function() {",
									"    pm.expect(pm.response.status).to.eql('Not Found')",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('ARTICLE_TITLE', 'How to train your dragon')",
									"pm.globals.set('ARTICLE_SLUG', 'how-to-train-your-dragon')",
									"pm.globals.set('ARTICLE_DESCRIPTION', 'Ever wonder how?')",
									"pm.globals.set('ARTICLE_BODY', 'Very carefully.')",
									"pm.globals.set('REQUEST_DATE_TIME', new Date().toISOString())",
									"pm.globals.set('TAG_1', 'training')",
									"pm.globals.set('TAG_2', 'dragons')"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{articles_user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/articles/no-such-article",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"no-such-article"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Article - error - unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is HTTP 401', function() {",
									"    pm.expect(pm.response.status).to.eql('Unauthorized')",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('ARTICLE_TITLE', 'How to train your dragon')",
									"pm.globals.set('ARTICLE_SLUG', 'how-to-train-your-dragon')",
									"pm.globals.set('ARTICLE_DESCRIPTION', 'Ever wonder how?')",
									"pm.globals.set('ARTICLE_BODY', 'Very carefully.')",
									"pm.globals.set('REQUEST_DATE_TIME', new Date().toISOString())",
									"pm.globals.set('TAG_1', 'training')",
									"pm.globals.set('TAG_2', 'dragons')"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{articles_user_token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/articles/{{ARTICLE_SLUG}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{ARTICLE_SLUG}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Article - error - unauthorized (wrong user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is HTTP 403', function() {",
									"    pm.expect(pm.response.status).to.eql('Forbidden')",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('ARTICLE_TITLE', 'How to train your dragon')",
									"pm.globals.set('ARTICLE_SLUG', 'how-to-train-your-dragon')",
									"pm.globals.set('ARTICLE_DESCRIPTION', 'Ever wonder how?')",
									"pm.globals.set('ARTICLE_BODY', 'Very carefully.')",
									"pm.globals.set('REQUEST_DATE_TIME', new Date().toISOString())",
									"pm.globals.set('TAG_1', 'training')",
									"pm.globals.set('TAG_2', 'dragons')"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{articles_user_token_2}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/articles/{{ARTICLE_SLUG}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{ARTICLE_SLUG}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Article",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is HTTP 204', function() {",
									"    pm.expect(pm.response.status).to.eql('No Content')",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('ARTICLE_TITLE', 'How to train your dragon')",
									"pm.globals.set('ARTICLE_SLUG', 'how-to-train-your-dragon')",
									"pm.globals.set('ARTICLE_DESCRIPTION', 'Ever wonder how?')",
									"pm.globals.set('ARTICLE_BODY', 'Very carefully.')",
									"pm.globals.set('REQUEST_DATE_TIME', new Date().toISOString())",
									"pm.globals.set('TAG_1', 'training')",
									"pm.globals.set('TAG_2', 'dragons')"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{articles_user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/articles/{{ARTICLE_SLUG}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{ARTICLE_SLUG}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Articles, Favorite, Comments",
			"item": [
				{
					"name": "Feed",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = pm.response.code === 200;",
									"",
									"pm.test['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(pm.response.text());",
									"",
									"    pm.test['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
									"    pm.test['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
									"    pm.test['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
									"",
									"    if(responseJSON.articles.length){",
									"        var article = responseJSON.articles[0];",
									"",
									"        pm.test['Article has \"title\" property'] = article.hasOwnProperty('title');",
									"        pm.test['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
									"        pm.test['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
									"        pm.test['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
									"        pm.test['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
									"        pm.test['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
									"        pm.test['Article has \"description\" property'] = article.hasOwnProperty('description');",
									"        pm.test['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
									"        pm.test['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
									"        pm.test['Article has \"author\" property'] = article.hasOwnProperty('author');",
									"        pm.test['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
									"        pm.test['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
									"        pm.test['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
									"    } else {",
									"        pm.test['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
									"    }",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"url": {
							"raw": "{{APIURL}}/articles/feed",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"feed"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Articles",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = pm.response.code === 200;",
									"",
									"pm.test['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(pm.response.text());",
									"",
									"    pm.test['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
									"    pm.test['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
									"    pm.test['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
									"",
									"    if(responseJSON.articles.length){",
									"        var article = responseJSON.articles[0];",
									"",
									"        pm.test['Article has \"title\" property'] = article.hasOwnProperty('title');",
									"        pm.test['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
									"        pm.test['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
									"        pm.test['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
									"        pm.test['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
									"        pm.test['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
									"        pm.test['Article has \"description\" property'] = article.hasOwnProperty('description');",
									"        pm.test['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
									"        pm.test['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
									"        pm.test['Article has \"author\" property'] = article.hasOwnProperty('author');",
									"        pm.test['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
									"        pm.test['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
									"        pm.test['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
									"    } else {",
									"        pm.test['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
									"    }",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"url": {
							"raw": "{{APIURL}}/articles",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Articles with auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = pm.response.code === 200;",
									"",
									"pm.test['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(pm.response.text());",
									"",
									"    pm.test['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
									"    pm.test['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
									"    pm.test['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
									"",
									"    if(responseJSON.articles.length){",
									"        var article = responseJSON.articles[0];",
									"",
									"        pm.test['Article has \"title\" property'] = article.hasOwnProperty('title');",
									"        pm.test['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
									"        pm.test['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
									"        pm.test['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
									"        pm.test['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
									"        pm.test['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
									"        pm.test['Article has \"description\" property'] = article.hasOwnProperty('description');",
									"        pm.test['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
									"        pm.test['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
									"        pm.test['Article has \"author\" property'] = article.hasOwnProperty('author');",
									"        pm.test['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
									"        pm.test['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
									"        pm.test['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
									"    } else {",
									"        pm.test['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
									"    }",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"url": {
							"raw": "{{APIURL}}/articles",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Articles by Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = pm.response.code === 200;",
									"",
									"pm.test['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(pm.response.text());",
									"",
									"    pm.test['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
									"    pm.test['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
									"    pm.test['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
									"",
									"    if(responseJSON.articles.length){",
									"        var article = responseJSON.articles[0];",
									"",
									"        pm.test['Article has \"title\" property'] = article.hasOwnProperty('title');",
									"        pm.test['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
									"        pm.test['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
									"        pm.test['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
									"        pm.test['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
									"        pm.test['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
									"        pm.test['Article has \"description\" property'] = article.hasOwnProperty('description');",
									"        pm.test['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
									"        pm.test['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
									"        pm.test['Article has \"author\" property'] = article.hasOwnProperty('author');",
									"        pm.test['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
									"        pm.test['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
									"        pm.test['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
									"    } else {",
									"        pm.test['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
									"    }",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"url": {
							"raw": "{{APIURL}}/articles?author={{USERNAME}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles"
							],
							"query": [
								{
									"key": "author",
									"value": "{{USERNAME}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Articles by Author with auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = pm.response.code === 200;",
									"",
									"pm.test['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(pm.response.text());",
									"",
									"    pm.test['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
									"    pm.test['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
									"    pm.test['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
									"",
									"    if(responseJSON.articles.length){",
									"        var article = responseJSON.articles[0];",
									"",
									"        pm.test['Article has \"title\" property'] = article.hasOwnProperty('title');",
									"        pm.test['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
									"        pm.test['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
									"        pm.test['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
									"        pm.test['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
									"        pm.test['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
									"        pm.test['Article has \"description\" property'] = article.hasOwnProperty('description');",
									"        pm.test['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
									"        pm.test['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
									"        pm.test['Article has \"author\" property'] = article.hasOwnProperty('author');",
									"        pm.test['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
									"        pm.test['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
									"        pm.test['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
									"    } else {",
									"        pm.test['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
									"    }",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"url": {
							"raw": "{{APIURL}}/articles?author={{USERNAME}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles"
							],
							"query": [
								{
									"key": "author",
									"value": "{{USERNAME}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Single Article by slug",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
									"",
									"var article = responseJSON.article || {};",
									"",
									"pm.test['Article has \"title\" property'] = article.hasOwnProperty('title');",
									"pm.test['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
									"pm.test['Article has \"body\" property'] = article.hasOwnProperty('body');",
									"pm.test['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
									"pm.test['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
									"pm.test['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
									"pm.test['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
									"pm.test['Article has \"description\" property'] = article.hasOwnProperty('description');",
									"pm.test['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
									"pm.test['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
									"pm.test['Article has \"author\" property'] = article.hasOwnProperty('author');",
									"pm.test['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
									"pm.test['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
									"pm.test['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"url": {
							"raw": "{{APIURL}}/articles/{{slug}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{slug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Articles by Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = pm.response.code === 200;",
									"",
									"pm.test['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(pm.response.text());",
									"    pm.test['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
									"    pm.test['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
									"    pm.test['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
									"    var article = responseJSON.articles[0];",
									"    pm.test['An article was returned'] = article !== undefined;",
									"    pm.test['Article has \"title\" property'] = article.hasOwnProperty('title');",
									"    pm.test['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
									"    pm.test['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
									"    pm.test['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
									"    pm.test['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
									"    pm.test['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
									"    pm.test['Article has \"description\" property'] = article.hasOwnProperty('description');",
									"    pm.test['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
									"    pm.test['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
									"    pm.test['The first tag is dragons'] = article.tagList[0] === 'dragons';",
									"    pm.test['The second tag is training'] = article.tagList[1] === 'training';",
									"    pm.test['Article has \"author\" property'] = article.hasOwnProperty('author');",
									"    pm.test['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
									"    pm.test['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
									"    pm.test['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"url": {
							"raw": "{{APIURL}}/articles?tag=dragons",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles"
							],
							"query": [
								{
									"key": "tag",
									"value": "dragons"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Article",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (!(pm.environment.isIntegrationTest)) {",
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
									"",
									"var article = responseJSON.article || {};",
									"",
									"pm.test['Article has \"title\" property'] = article.hasOwnProperty('title');",
									"pm.test['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
									"pm.test['Article has \"body\" property'] = article.hasOwnProperty('body');",
									"pm.test['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
									"pm.test['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
									"pm.test['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
									"pm.test['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
									"pm.test['Article has \"description\" property'] = article.hasOwnProperty('description');",
									"pm.test['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
									"pm.test['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
									"pm.test['Article has \"author\" property'] = article.hasOwnProperty('author');",
									"pm.test['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
									"pm.test['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
									"pm.test['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"article\":{\"body\":\"With two hands\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/articles/{{slug}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{slug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Favorite Article",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
									"",
									"var article = responseJSON.article || {};",
									"",
									"pm.test['Article has \"title\" property'] = article.hasOwnProperty('title');",
									"pm.test['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
									"pm.test['Article has \"body\" property'] = article.hasOwnProperty('body');",
									"pm.test['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
									"pm.test['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
									"pm.test['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
									"pm.test['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
									"pm.test['Article has \"description\" property'] = article.hasOwnProperty('description');",
									"pm.test['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
									"pm.test['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
									"pm.test['Article has \"author\" property'] = article.hasOwnProperty('author');",
									"pm.test['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
									"pm.test[\"Article's 'favorited' property is true\"] = article.favorited === true;",
									"pm.test['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
									"pm.test['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
									"pm.test[\"Article's 'favoritesCount' property is greater than 0\"] = article.favoritesCount > 0;",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/articles/{{slug}}/favorite",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{slug}}",
								"favorite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Articles Favorited by Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = pm.response.code === 200;",
									"",
									"pm.test['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(pm.response.text());",
									"    article = responseJSON.articles[0];",
									"    pm.test['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
									"    pm.test['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
									"    pm.test['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
									"    pm.test['Article has \"title\" property'] = article.hasOwnProperty('title');",
									"    pm.test['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
									"    pm.test['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
									"    pm.test['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
									"    pm.test['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
									"    pm.test['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
									"    pm.test['Article has \"description\" property'] = article.hasOwnProperty('description');",
									"    pm.test['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
									"    pm.test['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
									"    pm.test['Article has \"author\" property'] = article.hasOwnProperty('author');",
									"    pm.test['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
									"    pm.test['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
									"    pm.test['favoritesCount is 1'] = article.favoritesCount === 1;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"url": {
							"raw": "{{APIURL}}/articles?favorited={{USERNAME}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles"
							],
							"query": [
								{
									"key": "favorited",
									"value": "{{USERNAME}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Articles Favorited by Username with auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = pm.response.code === 200;",
									"",
									"pm.test['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(pm.response.text());",
									"    article = responseJSON.articles[0];",
									"    pm.test['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
									"    pm.test['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
									"    pm.test['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
									"    pm.test['Article has \"title\" property'] = article.hasOwnProperty('title');",
									"    pm.test['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
									"    pm.test['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
									"    pm.test['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
									"    pm.test['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
									"    pm.test['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
									"    pm.test['Article has \"description\" property'] = article.hasOwnProperty('description');",
									"    pm.test['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
									"    pm.test['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
									"    pm.test['Article has \"author\" property'] = article.hasOwnProperty('author');",
									"    pm.test['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
									"    pm.test['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
									"    pm.test['favoritesCount is 1'] = article.favoritesCount === 1;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"url": {
							"raw": "{{APIURL}}/articles?favorited={{USERNAME}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles"
							],
							"query": [
								{
									"key": "favorited",
									"value": "{{USERNAME}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfavorite Article",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
									"",
									"var article = responseJSON.article || {};",
									"",
									"pm.test['Article has \"title\" property'] = article.hasOwnProperty('title');",
									"pm.test['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
									"pm.test['Article has \"body\" property'] = article.hasOwnProperty('body');",
									"pm.test['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
									"pm.test['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
									"pm.test['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
									"pm.test['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
									"pm.test['Article has \"description\" property'] = article.hasOwnProperty('description');",
									"pm.test['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
									"pm.test['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
									"pm.test['Article has \"author\" property'] = article.hasOwnProperty('author');",
									"pm.test['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
									"pm.test['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
									"pm.test['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
									"pm.test[\"Article's \\\"favorited\\\" property is false\"] = article.favorited === false;",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/articles/{{slug}}/favorite",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{slug}}",
								"favorite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment for Article",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test['Response contains \"comment\" property'] = responseJSON.hasOwnProperty('comment');",
									"",
									"var comment = responseJSON.comment || {};",
									"",
									"pm.test['Comment has \"id\" property'] = comment.hasOwnProperty('id');",
									"pm.globals.set('commentId', comment.id);",
									"",
									"pm.test['Comment has \"body\" property'] = comment.hasOwnProperty('body');",
									"pm.test['Comment has \"createdAt\" property'] = comment.hasOwnProperty('createdAt');",
									"pm.test['\"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(comment.createdAt);",
									"pm.test['Comment has \"updatedAt\" property'] = comment.hasOwnProperty('updatedAt');",
									"pm.test['\"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(comment.updatedAt);",
									"pm.test['Comment has \"author\" property'] = comment.hasOwnProperty('author');",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"comment\":{\"body\":\"Thank you so much!\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/articles/{{slug}}/comments",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{slug}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Comments for Article",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = pm.response.code === 200",
									"",
									"pm.test['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(pm.response.text());",
									"",
									"    pm.test['Response contains \"comments\" property'] = responseJSON.hasOwnProperty('comments');",
									"",
									"    if(responseJSON.comments.length){",
									"        var comment = responseJSON.comments[0];",
									"",
									"        pm.test['Comment has \"id\" property'] = comment.hasOwnProperty('id');",
									"        pm.test['Comment has \"body\" property'] = comment.hasOwnProperty('body');",
									"        pm.test['Comment has \"createdAt\" property'] = comment.hasOwnProperty('createdAt');",
									"        pm.test['\"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(comment.createdAt);",
									"        pm.test['Comment has \"updatedAt\" property'] = comment.hasOwnProperty('updatedAt');",
									"        pm.test['\"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(comment.updatedAt);",
									"        pm.test['Comment has \"author\" property'] = comment.hasOwnProperty('author');",
									"    }",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"url": {
							"raw": "{{APIURL}}/articles/{{slug}}/comments",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{slug}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Comments for Article without login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = pm.response.code === 200",
									"",
									"pm.test['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(pm.response.text());",
									"",
									"    pm.test['Response contains \"comments\" property'] = responseJSON.hasOwnProperty('comments');",
									"",
									"    if(responseJSON.comments.length){",
									"        var comment = responseJSON.comments[0];",
									"",
									"        pm.test['Comment has \"id\" property'] = comment.hasOwnProperty('id');",
									"        pm.test['Comment has \"body\" property'] = comment.hasOwnProperty('body');",
									"        pm.test['Comment has \"createdAt\" property'] = comment.hasOwnProperty('createdAt');",
									"        pm.test['\"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(comment.createdAt);",
									"        pm.test['Comment has \"updatedAt\" property'] = comment.hasOwnProperty('updatedAt');",
									"        pm.test['\"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(comment.updatedAt);",
									"        pm.test['Comment has \"author\" property'] = comment.hasOwnProperty('author');",
									"    }",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"url": {
							"raw": "{{APIURL}}/articles/{{slug}}/comments",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{slug}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Comment for Article",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/articles/{{slug}}/comments/{{commentId}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{slug}}",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Article",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/articles/{{slug}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{slug}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Profiles",
			"item": [
				{
					"name": "Register Celeb",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (!(pm.environment.isIntegrationTest)) {",
									"    var responseJSON = JSON.parse(pm.response.text());",
									"",
									"    pm.test('Response contains \"user\" property', function() {",
									"        pm.expect(responseJSON).to.have.property('user');",
									"    });",
									"",
									"    var user = responseJSON.user || {};",
									"",
									"    pm.test('\"email\" property matches celeb_ + EMAIL variable', function() {",
									"        const email = pm.globals.get('EMAIL') || pm.environment.get('EMAIL');",
									"        pm.expect(user.email).to.eql(\"celeb_\" + email);",
									"    });",
									"    pm.test('\"usermame\" property matches celeb_ + USERNAME variable', function() {",
									"        const username = pm.globals.get('USERNAME') || pm.environment.get('USERNAME');",
									"        pm.expect(user.username).to.eql(\"celeb_\" + username);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"celeb_{{EMAIL}}\", \"password\":\"{{PASSWORD}}\", \"username\":\"celeb_{{USERNAME}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/users",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Follow Profile - error - unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is HTTP 401', function() {",
									"    pm.expect(pm.response.status).to.eql('Unauthorized')",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"{{EMAIL}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}/follow",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"celeb_{{USERNAME}}",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Follow Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response contains \"profile\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('profile')",
									"});",
									"",
									"var profile = responseJSON.profile || {};",
									"",
									"pm.test('\"usermame\" matches celeb_ + USERNAME variable', function() {",
									"    const username = pm.globals.get('USERNAME') || pm.environment.get('USERNAME')",
									"    pm.expect(profile.username).to.eql(\"celeb_\" + username)",
									"});",
									"pm.test('Profile has \"bio\" property', function() {",
									"    pm.expect(profile).to.have.property('bio')",
									"});",
									"pm.test('Profile has \"image\" property', function() {",
									"    pm.expect(profile).to.have.property('image')",
									"});",
									"pm.test('Profile has \"following\" property', function() {",
									"    pm.expect(profile).to.have.property('following')",
									"    pm.expect(profile.following).to.eql(true)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"{{EMAIL}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}/follow",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"celeb_{{USERNAME}}",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Follow Profile - already following",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response contains \"profile\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('profile')",
									"});",
									"",
									"var profile = responseJSON.profile || {};",
									"",
									"pm.test('\"usermame\" matches celeb_ + USERNAME variable', function() {",
									"    const username = pm.globals.get('USERNAME') || pm.environment.get('USERNAME')",
									"    pm.expect(profile.username).to.eql(\"celeb_\" + username)",
									"});",
									"pm.test('Profile has \"bio\" property', function() {",
									"    pm.expect(profile).to.have.property('bio')",
									"});",
									"pm.test('Profile has \"image\" property', function() {",
									"    pm.expect(profile).to.have.property('image')",
									"});",
									"pm.test('Profile has \"following\" property', function() {",
									"    pm.expect(profile).to.have.property('following')",
									"    pm.expect(profile.following).to.eql(true)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"{{EMAIL}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}/follow",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"celeb_{{USERNAME}}",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Follow Profile - validation - user doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is HTTP 404', function() {",
									"    pm.expect(pm.response.status).to.eql('Not Found')",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"{{EMAIL}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/profiles/nonexistentuser_{{USERNAME}}/follow",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"nonexistentuser_{{USERNAME}}",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Profile - authenticated - following",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response contains \"profile\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('profile')",
									"});",
									"",
									"var profile = responseJSON.profile || {};",
									"",
									"pm.test('\"usermame\" matches celeb_ + USERNAME variable', function() {",
									"    const username = pm.globals.get('USERNAME') || pm.environment.get('USERNAME')",
									"    pm.expect(profile.username).to.eql(\"celeb_\" + username)",
									"});",
									"pm.test('Profile has \"bio\" property', function() {",
									"    pm.expect(profile).to.have.property('bio')",
									"});",
									"pm.test('Profile has \"image\" property', function() {",
									"    pm.expect(profile).to.have.property('image')",
									"});",
									"pm.test('Profile has \"following\" property equal true', function() {",
									"    pm.expect(profile).to.have.property('following')",
									"    pm.expect(profile.following).to.eql(true)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"url": {
							"raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"celeb_{{USERNAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Profile - authenticated - not following",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response contains \"profile\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('profile')",
									"});",
									"",
									"var profile = responseJSON.profile || {};",
									"",
									"pm.test('\"usermame\" matches SECOND_USERNAME variable', function() {",
									"    const username = pm.globals.get('SECOND_USERNAME');",
									"    pm.expect(profile.username).to.eql(username)",
									"});",
									"pm.test('Profile has \"bio\" property', function() {",
									"    pm.expect(profile).to.have.property('bio')",
									"});",
									"pm.test('Profile has \"image\" property', function() {",
									"    pm.expect(profile).to.have.property('image')",
									"});",
									"pm.test('Profile has \"following\" property equal false', function() {",
									"    pm.expect(profile).to.have.property('following')",
									"    pm.expect(profile.following).to.eql(false)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"url": {
							"raw": "{{APIURL}}/profiles/{{SECOND_USERNAME}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"{{SECOND_USERNAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Profile - error - 404 not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is HTTP 404', function() {",
									"    pm.expect(pm.response.status).to.eql('Not Found')",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"url": {
							"raw": "{{APIURL}}/profiles/nonexistant_{{USERNAME}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"nonexistant_{{USERNAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Profile - validation - invalid username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is HTTP 404', function() {",
									"    pm.expect(pm.response.status).to.eql('Not Found')",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"url": {
							"raw": "{{APIURL}}/profiles/",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Profile - unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response contains \"profile\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('profile')",
									"});",
									"",
									"var profile = responseJSON.profile || {};",
									"",
									"pm.test('\"usermame\" matches celeb_ + USERNAME variable', function() {",
									"    const username = pm.globals.get('USERNAME') || pm.environment.get('USERNAME')",
									"    pm.expect(profile.username).to.eql(\"celeb_\" + username)",
									"});",
									"pm.test('Profile has \"bio\" property', function() {",
									"    pm.expect(profile).to.have.property('bio')",
									"});",
									"pm.test('Profile has \"image\" property', function() {",
									"    pm.expect(profile).to.have.property('image')",
									"});",
									"pm.test('Profile has \"following\" property', function() {",
									"    pm.expect(profile).to.have.property('following')",
									"    pm.expect(profile.following).to.eql(false)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"celeb_{{USERNAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfollow Profile - error - unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is HTTP 401', function() {",
									"    pm.expect(pm.response.status).to.eql('Unauthorized')",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}/follow",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"celeb_{{USERNAME}}",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfollow Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response contains \"profile\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('profile')",
									"});",
									"",
									"var profile = responseJSON.profile || {};",
									"",
									"pm.test('\"usermame\" matches celeb_ + USERNAME variable', function() {",
									"    const username = pm.globals.get('USERNAME') || pm.environment.get('USERNAME')",
									"    pm.expect(profile.username).to.eql(\"celeb_\" + username)",
									"});",
									"pm.test('Profile has \"bio\" property', function() {",
									"    pm.expect(profile).to.have.property('bio')",
									"});",
									"pm.test('Profile has \"image\" property', function() {",
									"    pm.expect(profile).to.have.property('image')",
									"});",
									"pm.test('Profile has \"following\" property', function() {",
									"    pm.expect(profile).to.have.property('following')",
									"    pm.expect(profile.following).to.eql(false)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}/follow",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"celeb_{{USERNAME}}",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfollow Profile - error - not already following",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is HTTP 422', function() {",
									"    pm.expect(pm.response.status).to.eql('Unprocessable Entity')",
									"})",
									"",
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response contains \"errors\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('errors')",
									"});",
									"",
									"var errors = responseJSON.errors || {};",
									"",
									"pm.test('\"username\" not already following', function() {",
									"    pm.expect(errors).to.have.property('username')",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}/follow",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"celeb_{{USERNAME}}",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Profile - authenticated - unfollowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(pm.response.text());",
									"",
									"pm.test('Response contains \"profile\" property', function() {",
									"    pm.expect(responseJSON).to.have.property('profile')",
									"});",
									"",
									"var profile = responseJSON.profile || {};",
									"",
									"pm.test('\"usermame\" matches celeb_ + USERNAME variable', function() {",
									"    const username = pm.globals.get('USERNAME') || pm.environment.get('USERNAME')",
									"    pm.expect(profile.username).to.eql(\"celeb_\" + username)",
									"});",
									"pm.test('Profile has \"bio\" property', function() {",
									"    pm.expect(profile).to.have.property('bio')",
									"});",
									"pm.test('Profile has \"image\" property', function() {",
									"    pm.expect(profile).to.have.property('image')",
									"});",
									"pm.test('Profile has \"following\" property equal false', function() {",
									"    pm.expect(profile).to.have.property('following')",
									"    pm.expect(profile.following).to.eql(false)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"url": {
							"raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"celeb_{{USERNAME}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tags",
			"item": [
				{
					"name": "All Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = pm.response.code === 200;",
									"",
									"pm.test['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(pm.response.text());",
									"    ",
									"    pm.test['Response contains \"tags\" property'] = responseJSON.hasOwnProperty('tags');",
									"    pm.test['\"tags\" property returned as array'] = Array.isArray(responseJSON.tags);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"url": {
							"raw": "{{APIURL}}/tags",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"tags"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}